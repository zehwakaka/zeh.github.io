{"meta":{"title":"Alice's blog","subtitle":"郑","description":null,"author":"John Doe","url":"http://zehwakaka.github.io"},"pages":[],"posts":[{"title":"hexo常用命令","slug":"hexo常用命令","date":"2020-08-22T07:14:41.000Z","updated":"2020-08-22T08:40:34.043Z","comments":true,"path":"2020/08/22/hexo常用命令/","link":"","permalink":"http://zehwakaka.github.io/2020/08/22/hexo常用命令/","excerpt":"","text":"常用命令hexo new &quot;postName&quot; #新建文章 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本 缩写：hexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy 组合命令：hexo s -g #生成并本地预览 hexo d -g #生成并上传","raw":null,"content":null,"categories":[],"tags":[]},{"title":"数据库概论复习","slug":"数据库概论复习","date":"2020-08-22T07:10:42.000Z","updated":"2020-08-24T17:36:55.255Z","comments":true,"path":"2020/08/22/数据库概论复习/","link":"","permalink":"http://zehwakaka.github.io/2020/08/22/数据库概论复习/","excerpt":"","text":"版权所有 数据库第一章 绪论数据库系统概述 数据库四个基本概念：数据库系统(DBS)包括 数据库管理系统(DBMA)，数据库管理员(DBA)，数据库(DB)。 数据管理技术的产生和发展：数据管理技术经历了人工管理、文件管理、数据库系统三个阶段。 数据库系统的特点 数据结构化 共享性高、冗余度低且易扩充 数据独立性高：数据独立性、物理独立性、逻辑独立性 数据由数据库管理系统统一管理和控制 数据模型 据模型也是一种模型，它是对现实世界数据特征的抽象。数据模型是数据库系统的核心和基础。 两类数据模型：第一类是概念模型，第二类是逻辑模型和物理模型。 首先将现实世界抽象为信息世界，然后将信息世界转换为机器世界。 概念模型：概念模型最常用的方法是实体-联系方法，E-R方法也称为E-R模型 实体：客观存在并可互相区别的事物称为实体。 属性：实体所具有的某一特性称为属性。 码：唯一标识实体的属性集称为码。 实体型：用实体名及其属性名集合来抽象和刻画同类实体，称为实体型。 实体集：同一类型实体的集合称为实体集 联系：实体之间的联系通常是指不同实体集之间的联系。实体之间的联系有一对一、一对多和多对多等多种类型。数据模型的组成要素 数据结构：数据结构描述数据库的组成对象以及对象之间的联系。 数据操作：数据操作是指对数据库中各种对象（型）的实例（值）允许执行的操作的集合，包括操作及有关的操作规则。 数据的完整性约束条件：数据的完整性约束条件是一组完整性规则。 常用的数据模型 层次模型 网状模型 关系模型 关系模型的数据结构 关系：一个关系对应通常说的一张表 元组：表中的一行即为一个元组 属性：表中的一列即为一个属性，给每一个属性起一个名称即属性名 码：也称码键。表中的某个属性组，它可以唯一确定一个元组 域：域是一组具有相同数据类型的值的集合 分量：元组中的一个属性值 关系模型要求关系必须是规范的，关系的每一个分量必须是一个不可分的数据项 关系模型的数据操纵与完整性约束 关系模型中的数据操作是集合操作，操作对象和操作结果都是关系。关系模型把存取路径向用户隐蔽起来 关系模型的优缺点 关系模型与格式化模型不同，他是建立在严格的数学基础上的。 关系模型的概念单一 关系模型的存取路径对用户透明 面向对象数据模型 对象关系数据模型 半结构化数据模型 数据库系统的结构 数据库系统模式的概念：在数据模型中有“型”和“值”的概念。型是指对某一类数据的结构和属性的说明，值是型的一个具体赋值。 模式是相对稳定的，而实例是相对变动的。 数据库系统的三级模式结构图： 三级模式 模式：模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。 外模式：外模式也称子模式或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。 内模式：内模式也称存储模式，一个数据库只有一个内模式。它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。 数据库的二级映像功能与数据独立性 外模式/模式映像：当模式改变时(例如增加新的关系、新的属性、改变属性的数据类型等)，由数据库管理员对各个外模式/模式的映像作相应改变，可以使外模式保持不变。应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。 模式/内模式映像：当数据库的存储结构改变时(例如选用了另一种存储结构)，由数据库管理员对模式/内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性，简称数据的物理独立性。 数据与程序之间的独立性使得数据的定义和描述可以从应用程序中分离出去。另外，由于数据的存取由数据库管理系统管理，从而简化了应用程序的编制，大大减少了应用程序的维护和修改。 据库系统的组成 包括硬件平台及数据库、软件、人员。 数据库管理员(DBA)职责： 决定数据库中的信息内容和结构 决定数据库的存储结构和存储策略 定义数据的安全性要求和完整性约束条件 监控数据库的使用和运行 数据库的改进和重组、重构 第二章 关系数据库关系数据结构及形式化定义 关系 域：域是一组具有相同数据类型的值的集合。 笛卡尔积：笛卡尔积定义，给定一组域D1,D2,…,Dn，允许其中某些域是相同的，D1,D2,…,Dn的笛卡尔积为 ​ D1\\D2*…*Dn = {(d1,d2,…,dn)|di属于Di,i=1,2,…,n}*​ 其中，每一个元素(d1,d2,…,dn)叫作一个n元组，或简称元组。元素中的每一个值di叫作一个分量。​ 一个域允许的不同取值个数称为这个域的基数。 关系：定义，D1*D2*…*Dn的子集叫做在域D1,D2,…,Dn上的关系，表示为R(D1,D2,…,Dn)这里R表示关系的名字,n是关系的目或度。当n = 1时，称该关系为一元关系。当n = 2时，称该关系为二元关系。 某一属性组的值能唯一的标识一个元组，而其子集不能，则称该属性组为候选码。若一个关系有多个候选码，则选定其中一个为主码。候选码的诸属性称为主属性。不包含在任何候选码中的属性称为非主属性或非码属性。在最简单的情况下，候选码只包含一个属性。在最极端的情况下，关系模式的所有属性是这个关系模式的候选码，称为全码。 关系可以有三种类型：基本关系(通常又称为基本表或基表)、查询表和视图表。 关系的性质： 列是同质的，即每一列中的分量是同一类型的数据，来自同一个域。 不同的列可出自同一个域，称其中的每一列为一个属性，不同的属性要给予不同的属性名。 列的顺序无所谓，即列的次序可以任意交换。 任意两个元组的候选码不能取相同的值。 行的顺序无所谓，即行的次序可以任意交换。 分量必须取原子值，即每一个分量都必须是不可分的数据项 这些规范条件中最基本的一条就是，关系的每一个分量必须是一个不可分的数据项。规范化的关系简称为范式(NF)。 关系模式 关系的描述称为关系模式。它可以形式化的表示为R(U,D,DOM,F)。其中R为关系名，U为组成改关系的属性名集合，D为U中属性所来自的域，DOM为属性向域的映像集合，F为属性间数据的依赖关系集合。 关系数据库 关系数据库也有型和值之分。关系数据库的型也称为关系数据库模式，是对关系数据库的描述。关系数据库的值是这些关系模式在某一时刻对应的关系的集合，通常就称为关系数据库。 关系操作 基本的关系操作：关系模型中常用的关系操作包括查询操作和插入、删除、修改操作两大部分。 关系的查询表达能力很强，是关系操作中最主要的部分。查询操作又可以分为旋转、投影、连接、除、并、差、交、笛卡尔积等。其中选择、投影、并、差、笛卡尔积是5种基本操作。 关系操作的特点是集合操作方式，即操作的对象和结果都是集合。这种操作方式也称为一次一集合的方式。相应的非关系数据模型的数据操作方式则为一次一记录的方式。 关系数据语言的分类 早期的关系操作能力通常用代数方式或逻辑方式来表示，分别称为关系代数和关系演算。关系代数用对关系的运算来表达查询要求，关系演算则用谓词来表达查询要求。关系演算又可按谓词变元的基本对象是元组变量还是域变量分为元组关系演算和域关系演算。 还有一种介于关系代数和关系演算之间的结构化查询语言(SQL)。SQL是集查询、数据定义语言、数据操纵语言和数据控制语言于一体的关系数据语言。 关系的完整性 关系模型中有三类完整性约束：实体完整性、参照完整性和用户定义的完整性。其中实体完整性和参照完整性是关系模型必须满足的完整性约束条件，被称作关系的两个不变性。 实体完整性：实体完整性规则，若属性(指一个或一组属性)A是基本关系R的主属性，则A不能取空值。所谓空值就是“不知道”或“不存在”或“无意义”的值。 对实体完整性规则说明： 实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。 现实世界中的实体是可区分的，即它们具有某种唯一性标识。例如每个学生都是独立的个体，是不一样的。 相应的，关系模型中以主码作为唯一性标识。 主码中的属性不能取空值。 参照完整性：设F是基本关系R的一个或一组属性，但不是关系R的码，Ks是基本关系S的码。如果F与Ks相对应，则称F是R的外码，并称基本关系R为参照关系，基本关系S为被参照关系或目标关系。 参照完整性规则：若属性(或属性组)F是基本关系R的外码，它与基本关系S的主码Ks相对应(基本关系R和S不一定是不同的关系)，则对于R中每个元组在F上的值必须： 或者取空值(F的每个属性值均为空值) 或者等于S中某个元组的主码值。 用户定义的完整性 用户定义的完整性就是针对某一具体关系数据库的约束条件，它反映某一具体应用所涉及的数据必须满足的语义要求。 关系代数 关系代数是一种抽象的查询语言，它用对关系的运算来表达查询。 任何一种运算都是将一定的运算符作用于一定的运算对象上，得到预期的运算结果。所以运算对象、运算符、运算结果是运算的三大要素。 关系代数用到的运算符包括两类：集合运算符和专门的关系运算符 关系代数的运算按运算符的不同可分为传统的集合运算和专门的关系运算两类。 传统的集合运算 传统的集合运算是二目运算，包括并、差、交、笛卡尔积四种运算 定义如下： 并：R∪S ={t|t属于R V t属于S} 其结果仍为n目关系，由属于R或属于S的元组组成。 差：R-S = {t|t属于R ∧ t不属于S} 其即结果关系仍为n目关系，由属于R而不属于S的所有元组组成。 交：R∩S = {t|t属于R ∧ t属于S} 其结果关系仍为n目关系，由既属于R又属于S的元组组成。关系的交可以用差来表示，即 R∩S = R - (R - S) 笛卡尔积：R*S = {tr 连ts|tr属于R ∧ ts属于S} 专门的关系运算 专门的关系运算包括选择、投影、连接、除运算 记号： 设关系模式为R(A1,A2,…,An)，它的一个关系设为R。t属于R表示t是R的一个元组。t[Ai]则表示元组t中相应于属性Ai的一个分量。 若A = {Ai1,Ai2,…,Aik}，其中Ai1，Ai2，…，Aik是A1，A2，…，An中的一部分，则A称为属性列或属性组。t[A] = (t[Ai1],t[Ai2],…,t[Aik])表示元组t在属性列A上诸分量的集合，A反则表示{A1,A2,…,An}中去掉{Ai1,Ai2,…,Aik}后剩余的属性组。 R为n目关系，S为m目关系。tr属于R，ts属于S，tr连接ts称为元组的连接或元组的串接。他是一个n+m列的元组前n个分量为R中的一个n元组，后m个分量为S中的一个m元组。 给定一个关系R(X,Z),X和Z为属性组。当t[X] = x时，x在R象集定义为 ​ Zx = {t[Z]|t属于R，t[X] = x} 它表示R中属性组X上值为x的诸元组在Z上分量的集合。 选择：选择又称为限制。它是在关系R中选择满足给定条件的诸元组，记作 的塔F(R) = {t|t属于R ∧ F(t)= ‘真’} 投影：关系R上的投影是从R中选择出若干属性列组成新的关系。记作 pi A(R) = {t[A]|t属于R} 其中A为R中的属性列。投影是从列的角度进行的运算。 连接：连接也称为 θ连接。他是从两个关系的笛卡尔积中选取属性间满足一定条件的元组。记作： 连接运算中有两种最为重要也最为常用的连接，一种是等值连接，另一种是自然连接。θ为“=”的连接运算称为等值连接是从关系R与S的广义笛卡尔积中选取A、B属性值相等的那些元组。自然连接是一种特殊的等值连接，它要求两个关系中进行比较的分量必须是同名的属性组，并且在结果中把重复的属性列去掉。即若R和S中具有相同的属性组B,U为R和S的全体属性集合。一般的连接操作是从行的角度进行运算，但自然连接还需要取消重复列，所以是同时从行和列的角度进行运算。 两个关系R和S在做自然连接时，选择两个关系在公共属性上值相等的元组构成新的关系。此时，关系R中某些元组有可能在S中不存在公共属性上值相等的元组，从而造成R中这些元组在操作时被舍弃，同样，S中某些元组也可能被舍弃。这些被舍弃的元组称为悬浮元组。 如果把悬浮元组也保存在结果关系中，而在其他属性上填空值(NULL)，那么这种连接就叫做外连接，记作R =&gt;&lt;= S;如果只保留左边关系R中的悬浮元组就叫做左外连接R=&gt;&lt;S;如果只保留右边关系S中的悬浮元组就叫做右外连接，记作R&gt;&lt;=S 除运算：设关系R除以关系S的结果为关系T，则T包含所有在R但不在S中的属性及其值，且T的元组与S的元组的所有组合都在R中。 下面用象集来定义除法：给定关系R(X,Y)和S(Y,Z)，其中X,Y,Z为属性组。R中的Y与S中的Y可以有不同的属性名，但必须出自相同的域集。 R与S的除运算得到一个新的关系P(X)，P是R中满足下列条件的元组在X属性列上的投影：元组在X上分量值x的象集Yx包含S在Y上投影的集合。记作：R/S = {Tr[X]|tr属于R ∧ piY(S)包含于Yx} 其中Yx为x在R中的象集，x = tr[X]。除操作是同时从行和列角度进行运算。 R/S -&gt;投影-&gt;象集-&gt;包含 其中并，差，笛卡尔积，选择和投影这五种运算为基本的运算。其他三种运算，即交，连接和除，均可以用这5种基本运算来表达。引进他们并不增加语言的能力，但可以简化表达 关系代数中，这些运算经有限次复合后形成的表达式称为关系代数表达式。 第三章 关系数据库标准语言SQLSQL 概述 SQL 的产生与发展 目前，没有一个数据库系统能够支持SQL标准的所有概念和特性。大部分数据库系统能支持SQL/92标准中的大部分功能以及SQL99、SQL2003中的部分新概念。同时，许多软件厂商对SQL基本命令集还进行了不同程度的扩展和修改，又可以支持标准以外的一些功能特性。 SQL的特点 综合统一 高度非过程化 只要提出“做什么”，而无须指明“怎么做”，因此无须了解存取路径。存取路径的选择以及SQL的操作过程由系统自动完成。 面向集合的操作方式 以同一种语法结构提供多种使用方式 语言简洁，易学易用 数据定义一个关系数据库管理系统的实例中可以建立多个数据库，一个数据库中可以建立多个模式，一个模式下通常包括多个表、视图和索引等数据库对象。 模式的定义与删除 定义模式：在SQL中，模式定义语句如下：create schema &lt;模式名&gt; authorization &lt;用户名&gt; ​ 如果没有指定&lt;模式名&gt;，那么&lt;模式名&gt;隐含为&lt;用户名&gt; 要创建模式，调用该命令的用户必须拥有数据库管理员权限，或者获得了数据库管理员授予的create schema 的权限 目前，create chema 中可以接受 create table，create view和grant 子句。也就是说用户可以在创建模式的同时在这个模式定义中进一步创建基本表、视图。定义授权。即：create schema &lt;模式名&gt; authorization &lt;用户名&gt; [&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;] 删除模式：在SQL中，删除模式语句如下，drop schema &lt;模式名&gt;&lt;cascade|restrict&gt; 其中cascade和restrict两者必选其一。选择了cascade(级联)，表示在删除模式的同时把该模式中所有的数据库对象全部删除；选择了restrict(限制)，表示如果该模式中已经定义了下属的数据库对象(如表，视图等)，则拒绝该删除语句的执行。只有当该模式中没有任何下属的对象时才能执行 drop schema语句。 基本表的定义、删除与修改 定义基本表：创建了一个模式就建立了一个数据库的命名空间，一个框架。在这个空间中首先要定义的是该模式包含的数据库基本表。SQL语言使用create table 语句定义基本表，其基本格式如下： create table &lt;表名&gt;(&lt;列名&gt;&lt;数据类型&gt;[列级完整性约束条件][,&lt;列名&gt;&lt;数据类型&gt;[列级完整性约束条件]][,表级完整性约束条件]) 参照表和被参照表可以是同一个表 数据类型： 模式与表 每一给基本表都属于某一个模式，一个模式包含多个基本表。当定义基本表时一般可以有三种方法定义它所属的模式，现在要在S-T中定义Student、Course、SC等基本表。 方法一：在表名中明显的给出模式名。 create table ”S-T“.Student(…);Student所属的模式是S-T 方法二：在创建模式语句中同时创建表 方法三：设置所属的模式，这样在创建表时表名中不必给出模式名。 当用户创建基本表(其他数据库对象也一样)时若没有指定模式，系统根据搜索路径来确定该对象所属的模式。 搜索路径包含一组模式列表，关系数据库管理系统会使用模式列表中第一个存在的模式作为数据库对象的模式名。若搜索路径中的模式名都不存在，系统将给出错误。 使用下面的语句可以显示当前的搜索路径： show search_path 搜索路径当前默认值是$user，PUBLIC。其含义是首先搜索与用户名相同的模式名，如果该模式名不存在，则使用PUBLIC模式 数据库管理员也可以设置搜索路径，如：SET search_path TO “S-T”,PUBLIC; 然后，定义基本表。实际结果是建立了S-T.Student基本表。因为关系数据库管理系统发现路径中第一个模式名S-T存在，就把该模式作为基本表Studnt所属的模式。 修改基本表 SQL语言用alter table语句修改基本表，其一般格式为 alter table &lt;表名&gt; [add [column] &lt;新列名&gt;&lt;数据类型&gt;[完整性约束]] [add &lt;表级完整性约束&gt;] [drop [column] &lt;列名&gt;[cascade|restrict]] [drop constraint &lt;完整性约束名&gt; [restrict|cascade]] [alter column &lt;列名&gt;&lt;数据类型&gt;] 删除基本表 drop table &lt;表名&gt;[restrict|cascade] 若选择restrict，则该表的删除是有限制条件的。欲删除的基本表不能被其他表的约束所引用(如cheack，foreign key等约束)，不能有视图，不能有触发器，不能有存储过程或函数等。如果存在这些依赖该表的对象，则此表不能被删除。 若选择cascade，则该表的删除没有限制条件。在删除基本表的同时，相关的依赖对象，例如视图，都将被一起删除。 默认情况是restrict 索引的建立与删除 数据库索引有多种类型，常见索引包括顺序文件上的索引、B+树索引、散列索引、位图索引等。顺序文件上的索引是针对按指定属性值升序或降序存储的关系，在该属性上建立一个顺序索引文件，索引文件由属性值和相应的元组指针组成。B+树索引是将索引属性组织成B+树形式，B+树的叶结点为属性值和相应的元组指针。B+树索引具有动态平衡的优点。散列索引是建立若干个桶，将索引属性按照其散列函数值映射到相应桶中，桶中存放索引属性值和相应的元组指针。散列索引具有查找速度快的特点。位图索引是用位向量记录所有属性中可能出现的值，每个位向量对于一个可能值。 关系数据库管理系统在执行查询时会自动选择合适的索引作为存取路径，用户不必也不能显式的选择索引。 建立索引：在SQL语言中，建立索引使用 create index 语句，一般格式为 create [unique][cluster] index &lt;索引名&gt; on &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;][,&lt;列名&gt;[&lt;次序&gt;]]…) 其中，&lt;表名&gt;是要建索引的基本表的名字。索引可以建立在该表的一列或多列上，各列名之间用逗号分隔。每个&lt;列名&gt;后面还可以用&lt;次序&gt;指定索引值的排列次序，可选ASC(升序)或DESC(降序)，默认值为ASC. UNIQUE表明此索引每一个索引值只对应唯一的数据记录。 CLUSTER 表示要建立的索引是聚簇索引。 修改索引 对于已经建立的索引，如果需要对其重新命名，可以使用ALTER INDEX 语句。其一般格式为： ALTER INDEX &lt;旧索引名&gt; RENAME TO &lt;新索引名&gt; 删除索引 在SQL中，删除索引使用DROP INDEX语句，其一般格式为 DROP INDEX &lt;索引名&gt; 数据字典 数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有的定义信息，包括关系模式定义，视图定义，索引定义，完整性约束定义，各类用户对数据库的操作权限，统计信息等。 数据查询 数据查询是数据库的核心操作。SQL提供了SELECT语句进行数据查询，该语句具有灵活的使用方式和丰富的功能。其一般格式为 select [all|distinct] &lt;目标列表达式&gt;[,&lt;目标列表达式&gt;]… from &lt;表名或视图名&gt; [,&lt;表名或视图名&gt;…]|(&lt;select语句&gt;)[AS]&lt;别名&gt; [where&lt;条件表达式&gt;] [group by &lt;列名1&gt;[having&lt;条件表达式&gt;]] [order by&lt;列名2&gt;[asc|desc]] 整个select语句的含义是，根据where子句的条件表达式从from子句指定的基本表、视图或派生表中找出满足条件的元组，再按select子句中的目标列表达式选出元组中的属性值形成结果表。 如果由group by 子句，则将结果按&lt;列名1&gt;的值进行分组，该属性列值相等的元组为一组。通常会在每组中作用聚集函数。如果 group by子句带having短语，则只有满足指定条件的组才予以输出。 如果有order by子句，则结果表还有按&lt;列名2&gt;的值升序或降序排序。 select语句既可以完成简单的单表查询，也可以完成复杂的连接查询和嵌套查询。 单表查询 选择表中的若干列 查询指定列：如select Sno，Sname from Student。各个列的顺序可以与表中的顺序不一致 查询全部列：如select * from Student 查询经过计算的值：select 子句的&lt;目标列表达式&gt;不仅可以使表中的属性列，也可以是表达式。如：select Sname，‘Year of Birth：’，2014-Sage BIRTHDAY from Student 选择表中的若干元组 消除取值重复的行 两个本科并不完全相同的元组在投影到指定的某些列上后，可能会变成相同的行。可以使用distinct消除他们。 如：select distinct Sno from SC 查询满足条件的元组 查询满足条件的元组可以通过where子句实现。where子句常用的查询条件 比较大小 确定范围：谓词between…and…和not between…and…可以用来查找属性值在(或不在)指定范围内的元组，其中between后是范围的下限(即低值)，and后是范围的上限(即高值)。 字符匹配 谓词like可以用来进行字符串的匹配。其一般语法格式如下： [not] like ‘&lt;匹配串&gt;’ [escape’&lt;换码字符&gt;’] 其含义是查找指定的属性列值与&lt;匹配串&gt;相匹配的元组。&lt;匹配串&gt;可以是一个完整的字符串，也可以含有通配符%和_。其中： %(百分号)代表任意长度(长度可以为0)的字符串。例如a%b表示以a开头，以b结尾的任意长度的字符串。 _(下横线)代表任意单个字符 如果用户要查询的字符串本身就含有通配符%或_,这是就要使用escape ‘&lt;换码字符&gt;’ 短语对通配符进行转义了。 涉及空值的查询 IS和NOT IS 多重条件查询 AND 和 OR order by子句 用户可以用order by子句对查询结果按照一个或多个属性列的升序(asc)或降序(desc)排列，默认值为升序。 对于空值，排序时显示的次序由具体系统实现来决定。例如按升序排，含空值的元组最后显示；按降序排，空值的元组则最先显示。各个系统的实现可以不同，只要保持一致就行。 聚集函数 为了进一步方便用户，增强检索功能，SQL提供了许多聚集函，主要有： 聚集函数 作用 count(*) 统计元组个数 count([distinct\\ all]&lt;列名&gt;) 统计一列中值的个数 sum([distinct\\ all]&lt;列名&gt;) 计算一列值的总和(此列必须是数值型) sum([distinct\\ all]&lt;列名&gt;) 计算一列值的平均值(此列必须是数值型) max([distinct\\ all]&lt;列名&gt;) 求一列值中的最大值 min([distinct\\ all]&lt;列名&gt;) 求一列值中的最小值 如果指定distinct短语，则表示在计算时要取消指定列中的重复值。如果不指定distinct短语或指定all短语(all为默认值)，则表示不取消重复值。 当聚集函数遇到空值时，除count(*)外，都跳过空值而只处理非空值。聚集函数只能用于select子句和group by中的having子句。 group by子句 group by子句将查询结果按某一列或多列的值分组，值相等的为一组。 对查询结果分组的目的是为了细化聚集函数的作用对象。如果未对查询结果分组，聚集函数将作用于整个查询结果。分组后聚集函数将作用于每一个组，即每一组都有一个函数值。 例子：见课本P99 例3.48 连接查询 若一个查询同时涉及两个以上的表，则称之为连接查询。连接查询是关系数据库中最主要的查询，包括等值连接查询、自然连接查询、非等值连接查询、自身连接查询、外连接查询和复合条件连接查询等。 等值与非等值连接查询 连接查询的where子句中用来连接两个表的条件称为连接条件或连接谓词其一般格式为 [&lt;表名1&gt;.]&lt;列名1&gt;&lt;比较运算符&gt;[&lt;表名2&gt;.]&lt;列名2&gt; 此外连接谓词还可以使用下面形式： [&lt;表名1&gt;.]&lt;列名1&gt; between [&lt;表名2&gt;.]&lt;列名2&gt; and [&lt;表名3&gt;.]&lt;列名3&gt; 当连接运算符为=时，称为等值连接。使用其他运算符称为非等值连接。 连接谓词中的列名称为连接字段。连接条件中的各连接字段类型必须是可比的，但名字不必相同。 关系数据库管理系统执行该连接操作的一种可能过程是：首先在表Student中找到第一个元组，然后从头开始扫描SC表，逐一查找与Student第一个元组的Sno相等的SC元组，找到后就将Student中的第一个元组与该元组拼接起来，形成结果表中的一个元组。SC全部查找完后，再找Student中第二个元组，然后再从头开始扫描SC，逐一查找满足连接条件的元组，找到后就将Student中的第二个元组与该元组拼接起来，形成结果表中一个元组。重复以上操作。这就是嵌套循环连接算法的基本思想。 如果在SC表Sno上建立了索引的化，就不用每次全表扫描SC表了，而是根据Sno值通过索引找到相应的SC元组。用索引查询SC中满足条件的元组一般会比全表扫描快。若在等值连接中把目标列中重复的属性列去掉则为自然连接。 一条SQL语句可以同时完成选择和连接查询，这时where子句是由连接谓词和选择谓词组成的复合条件。 自身连接 连接操作不仅可以在两个表之间进行，也可以是一个表与其自己进行连接，称为表的自身连接。例：select FIRST.Cno，SECOND.Cpno ​ from Course FIRST,Course SECOND ​ where FIRST.Cpno = SECOND.Cno 外连接 若某个学生没有选课，仍把Student的悬浮元组保存在结果关系中，而在SC表的属性上填空值NULL，这时就需要使用外连接。 左外连接列出左边关系中所有的元组，右外连接列出右边关系中所有的元组。 多表连接 连接操作处理可以是两表连接、一个表与其自身连接外，还可以是两个以上的表进行连接，猴子通常称为多表连接。 嵌套查询 在SQL语言中，一个select-from-where语句称为一个查询块。将一个查询块嵌套在另一个查询块的where子句或having短语的条件中的查询称为嵌套查询。上层的查询块称为外层查询或父查询，下层查询块称为内层查询或子查询。 SQL语言允许多层嵌套查询，即一个子查询中还可以嵌套其他子查询。需要特别指出的是，子查询的select语句中不能使用order by子句，order by子句只能对最终查询结果排序。 嵌套查询使用户可以用多个简单查询构成复杂的查询，从而增强SQL的查询能力。以层层嵌套的方式来构造程序正是SQL中”结构化“的含义所在。 带有in谓词的子查询 子查询的查询条件不依赖于父查询，称为不相关子查询 实现同一个查询请求可以有多种方法，当然不同的方法其执行效率可能会有差别，甚至会差别很大。这就是数据库编程人员应该掌握的数据库性能调优技术。 有些嵌套查询可以用连接运算代替，有些是不能替代的。 查询的查询条件不依赖于父查询，这类子查询称为不相关子查询。不相关子查询是较简单的一类子查询。如果子查询的查询条件依赖于父查询，这类子查询称为相关子查询，整个查询语句称为相关嵌套查询语句。 带有比较运算符的子查询 x是表SC的别名，又称为元组变量，可以用来表示SC的元组。内层查询是求一个学生所有选修课程平均成绩的，至于是哪个学生的平均成绩要看参数x.Sno的值，而该值是与父查询相关的，因此这类查询称为相关子查询。 求解相关子查询不能像求解不相关子查询那样一次将子查询求解出来，然后求解父查询。内层查询由于与外层查询有关，因此必须反复求值。 带有any(some) 或 all 谓词的子查询 子查询返回单值时可以用比较运算符，但返回多值时要用any(有的系统用some)或all谓词修饰符。而使用any或all谓词时则必须同时使用比较运算符。 &gt;any 大于子查询结果中的某个值 &gt;all 大于子查询结果中的所有值 例子见课本P107 例3.58 例子中的查询也可以用聚集函数来实现，事实上，用聚集函数实现子查询通常比直接用any或all查询效率要高。 带有exists谓词的子查询 exists代表存在量词∃。带有exists谓词的子查询不返回任何数据，只产生逻辑真值”true”或逻辑假值”false”。 例子：课本P109 例3.60 使用存在量词exists后，若内层查询结果非空，则外层的where子句返回真值，否则返回假值。 由exists引出的子查询，其目标列表达式通常都用*，因为带exists的子查询只返回真值或假值，给出列名无实际意义。 与exists谓词相对应的是not exists谓词。使用存在量词not exists后，若内层查询结果为空，则外层的where子句返回真值，否则返回假值。 未完待续。。。 —&gt;","raw":null,"content":null,"categories":[],"tags":[]},{"title":"杭电oj-1004","slug":"杭电oj-1004","date":"2020-04-06T04:43:21.000Z","updated":"2020-08-22T13:01:07.543Z","comments":true,"path":"2020/04/06/杭电oj-1004/","link":"","permalink":"http://zehwakaka.github.io/2020/04/06/杭电oj-1004/","excerpt":"","text":"杭电oj-10041234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;stdio.h&gt;#include&lt;string.h&gt;using namespace std;int max(int a[], int n)&#123;int max = a[0];int k = 0;for (int i = 0; i &lt; n; i++)&#123; if (a[i] &gt; max) &#123; max = a[i]; k = i; &#125;&#125;return k;&#125;int main()&#123;//freopen(\"C:/Users/19856/Desktop/wakaka.txt\",\"r\",stdin );int n;int k;while (1)&#123; char a[1005][17]; char b[17]; int c[1005] = &#123;0&#125;; memset(a, 0, sizeof(a)); memset(b, 0, sizeof(b)); scanf(\"%d\", &amp;n); if (n == 0)break; for (int i = 0; i &lt; n; i++) &#123; scanf(\"%s\", &amp;b); for (int j = 0; (j &lt; n)&amp;&amp;(a[j][0]!='\\0'); j++) &#123; if (!strcmp(a[j], b))c[j]++; &#125; if (a[i][0] == '\\0') &#123; strcpy(a[i], b); c[i]++; &#125; &#125; k = max(c, n); printf(\"%s\\n\", a[k]); &#125;&#125;","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://zehwakaka.github.io/categories/技术/"},{"name":"刷题","slug":"技术/刷题","permalink":"http://zehwakaka.github.io/categories/技术/刷题/"}],"tags":[{"name":"oj","slug":"oj","permalink":"http://zehwakaka.github.io/tags/oj/"}]},{"title":"blog写作之旅启程","slug":"blog写作之旅启程","date":"2020-04-06T04:06:27.000Z","updated":"2020-04-06T04:39:53.038Z","comments":true,"path":"2020/04/06/blog写作之旅启程/","link":"","permalink":"http://zehwakaka.github.io/2020/04/06/blog写作之旅启程/","excerpt":"","text":"十分抱歉个人于19年搭建主页，由于学业繁忙，再没去触碰，近期将边学习边写blog，内容包括不局限于 计算机网络，汇编语言，Java学习，希望能强迫自己output，也希望自己能熟练掌握markdown写作。","raw":null,"content":null,"categories":[{"name":"技术","slug":"技术","permalink":"http://zehwakaka.github.io/categories/技术/"},{"name":"汇编","slug":"技术/汇编","permalink":"http://zehwakaka.github.io/categories/技术/汇编/"}],"tags":[{"name":"汇编学习","slug":"汇编学习","permalink":"http://zehwakaka.github.io/tags/汇编学习/"}]},{"title":"hello hexo markdown","slug":"hello-hexo-markdown","date":"2020-04-05T19:58:17.000Z","updated":"2020-04-05T19:58:17.054Z","comments":true,"path":"2020/04/06/hello-hexo-markdown/","link":"","permalink":"http://zehwakaka.github.io/2020/04/06/hello-hexo-markdown/","excerpt":"","text":"","raw":null,"content":null,"categories":[],"tags":[]},{"title":"夜","slug":"银河-夜","date":"2019-06-08T17:27:12.124Z","updated":"2020-08-22T13:02:18.187Z","comments":true,"path":"2019/06/09/银河-夜/","link":"","permalink":"http://zehwakaka.github.io/2019/06/09/银河-夜/","excerpt":"","text":"银河空旷、坦荡，列车奔驰在夜的星空，似乎没有方向，也无法预测终点将在何时何地到来。生命，就像这遥远无依的茫然，充满了未知，有过光明与黑暗、挚爱与哀愁，然后脆弱得好似掉进银河的一颗星，瞬间沉没于无垠的浩瀚。忧伤的少年啊，在人生虚妄而伤感的旅途中，就这样缓慢悲伤地成长。也许你想要的，仅是些许的幸福和被这个世界所认同，却无奈地总被排斥在外。但不要哭泣，你所搭乘的列车，终点不会是伤感的归宿，而是银河最深处幸福恬静的天堂。 《银河铁道之夜》 — 〔日〕宫泽贤治","raw":null,"content":null,"categories":[{"name":"文学","slug":"文学","permalink":"http://zehwakaka.github.io/categories/文学/"}],"tags":[{"name":"文学","slug":"文学","permalink":"http://zehwakaka.github.io/tags/文学/"}]},{"title":"萌新Alice前来报道","slug":"初到小白，请多关照","date":"2019-06-07T16:00:00.000Z","updated":"2020-08-22T13:18:58.477Z","comments":true,"path":"2019/06/08/初到小白，请多关照/","link":"","permalink":"http://zehwakaka.github.io/2019/06/08/初到小白，请多关照/","excerpt":"","text":"第一次搭建blog，有点小激动(≧︶≦))(￣▽￣ )ゞ多多关照！","raw":null,"content":null,"categories":[{"name":"经验分享","slug":"经验分享","permalink":"http://zehwakaka.github.io/categories/经验分享/"}],"tags":[{"name":"技术交流","slug":"技术交流","permalink":"http://zehwakaka.github.io/tags/技术交流/"}]}]}